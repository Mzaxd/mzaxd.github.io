<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git设置代理(v2rayN)</title>
    <url>/2024/04/03/Git%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86(v2rayN)/</url>
    <content><![CDATA[<h2 id="为什么设置代理？"><a href="#为什么设置代理？" class="headerlink" title="为什么设置代理？"></a>为什么设置代理？</h2><p>在使用Git操作远程库（Github）的时候偶尔会失败，通常都是网络的问题<del>（众所周知的原因）</del>，通过使用代理可以有效避免这个问题</p>
<h2 id="查看代理本地监听的端口号"><a href="#查看代理本地监听的端口号" class="headerlink" title="查看代理本地监听的端口号"></a>查看代理本地监听的端口号</h2><ol>
<li>打开v2rayN的管理面板</li>
<li>点击<code>设置</code>，选择<code>参数设置</code></li>
<li>在弹出的<code>参数设置</code>页面找到下图中的<code>本地监听端口</code>和<code>协议</code></li>
<li>根据你的端口号和协议进行对应设置</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://blog-1310221847.cos.ap-beijing.myqcloud.com/202303181434674.png"
                      alt="image-20230318143459628"
                ></p>
<h2 id="设置Http代理"><a href="#设置Http代理" class="headerlink" title="设置Http代理"></a>设置Http代理</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># http协议，1081端口修改成自己的本地代理端口</span></span><br><span class="line">git config --global http.proxy http://127.0.0.1:1081</span><br><span class="line">git config --global https.proxy https://127.0.0.1:1081</span><br></pre></td></tr></table></figure></div>

<h2 id="设置socks代理"><a href="#设置socks代理" class="headerlink" title="设置socks代理"></a>设置socks代理</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># socks5协议，1080端口修改成自己的本地代理端口</span></span><br><span class="line">git config --global http.proxy socks5://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure></div>

<h2 id="只给Github加代理"><a href="#只给Github加代理" class="headerlink" title="只给Github加代理"></a>只给Github加代理</h2><p>上面的代理配置是让所有Git命令都走代理，但是如果你使用国内的Gitee或者自建的GitLab，那么使用代理只会让访问变慢。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># socks5协议，1080端口修改成自己的本地代理端口</span></span><br><span class="line">git config --global http.https://github.com.proxy socks5://127.0.0.1:1080</span><br><span class="line">git config --global https.https://github.com.proxy socks5://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line"><span class="comment"># http协议，1081端口修改成自己的本地代理端口</span></span><br><span class="line">git config --global http.https://github.com.proxy http://127.0.0.1:1081</span><br><span class="line">git config --global https.https://github.com.proxy http://127.0.0.1:1081</span><br></pre></td></tr></table></figure></div>

<h2 id="取消代理设置"><a href="#取消代理设置" class="headerlink" title="取消代理设置"></a>取消代理设置</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>工具技巧</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>V2ray</tag>
      </tags>
  </entry>
  <entry>
    <title>Noodles使用指南</title>
    <url>/2024/04/03/Noodles%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文旨在对项目的前因后果进行梳理，并且对其中的一些概念进行讲解，我也会说一些我具体的思考过程，方便大家理解的同时也是我个人的一个总结，接下来我们就开始吧。</p>
<h2 id="Noodles到底想解决什么问题？"><a href="#Noodles到底想解决什么问题？" class="headerlink" title="Noodles到底想解决什么问题？"></a>Noodles到底想解决什么问题？</h2><p>客观来讲，如果你没有对应的需求，那么将很难理解这个项目到底要干什么，我尽量举一些真实的例子，来帮助大家理解。</p>
<h3 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h3><p>这个项目是根据我个人的需求做的，那么我先来介绍一下我个人的情况。</p>
<p>我大概是从21年开始玩各种硬件的，和很多人一样，一开始从<code>硬路由</code>魔改系统（K2P）入门，慢慢到工控<code>软路由</code>（4415U），然后买硬件搭建自己的第一台<code>Nas(Unraid)</code>，第二台<code>Nas(Unraid)</code>，第一台<code>Windows Server服务器</code>。过程中也使用过<code>Esxi</code>，搭建过<code>Openstack</code>，了解过<code>PVE</code>，<code>FreeNas(现在叫TrueNas)</code>。回顾过去的几年时间，我把大部分个人时间都花在这上面，有时候一<strong>折腾</strong>就是好几天的时间。</p>
<h3 id="问题来源"><a href="#问题来源" class="headerlink" title="问题来源"></a>问题来源</h3><p>随着服务器的升级，性能的提升带来了虚拟化潜力的大幅提升，我目前的两台服务器价格是软路由的数倍，但所能承载的虚拟机&amp;容器数量却是软路由的几十倍。而虚拟机容器数量的暴增也带来了管理上的困难。比如：</p>
<ol>
<li>容器数量爆炸，现在任何应用都可以做成镜像，容器没有分类和快速搜索，容易遗忘和误操作。</li>
<li>虚拟化宿主关系繁杂混乱，物理机可以创建虚拟机，容器。虚拟机同样可以，一层套一层的虚拟化带来了很多潜在的问题。比如删除了一个虚拟机，结果是删除了一个虚拟机加很多容器。</li>
<li>物理服务器管理页面不统一，Unraid拥有非常完备的管理页面，那WindowsServer呢？难道每次都RDP登录到桌面去点点点吗，not graceful.</li>
<li>没有统一的掉线提醒，服务挂了用户第一时间不知道，只有到下次使用的时候才发现不能用了，极度影响使用体验</li>
<li>已有的解决方案与实际解决之间的鸿沟。K8S？Openstack？那些离我们太遥远了。</li>
</ol>
<p>Noodles的目的就是解决上述这些问题</p>
<p>总之</p>
<p>站在用户角度讲，用户并不想真正的“运维”服务器，用户只想享受服务器带来的服务<del>（既要也要，就是这么矫情）</del>，DIY过程的确实可以带来一定乐趣，但越来越多的“运维”，对于用户来说就不是乐趣而是负担了。</p>
<h2 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>整个项目分为三个工程，分别是前端，后端，探测器</p>
<ul>
<li>前端：由Vue3和Vuexy组成的操作界面</li>
<li>后端：由Java和SpringBoot等框架编写的后端逻辑</li>
<li>探测器：由Java和SpringBoot等框架编写的物理机信息探测器</li>
</ul>
<h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><ol>
<li>首先你需要准备好MySQL数据库，Redis数据库，RabbitMQ消息队列</li>
<li>在你的物理机环境中安装JDK&#x2F;JRE</li>
<li>拉取Noodles-Frontend前端代码</li>
<li>拉取Noodles后端代码</li>
<li>分别按照Readme进行配置和部署</li>
<li>拉取Noodles-Detector代码，并进行配置</li>
<li>将Maven打过的Jar包安装到对应的物理机环境中</li>
<li>将Noodles平台中录入对应的实例信息</li>
<li>开始使用</li>
</ol>
<h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><ul>
<li>所有物理机，虚拟机，容器，都可以统称为实例</li>
</ul>
<h4 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h4><ul>
<li>一组物理机，虚拟机，容器的编组。</li>
</ul>
<blockquote>
<p>举个例子：一个PT下载服务，包括一个Transmission容器，一个Qbittorrent容器，一个IYUU-PLUS容器，一个实例可以为多个服务提供支撑。</p>
</blockquote>
]]></content>
      <categories>
        <category>个人项目</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
